// ==============================================================================
// NVIDIA SAO for Ray-MMD converted and originaly made by Morgan McGuire and Michael Mara
// ------------------------------------------------------------------------------
// COPYRIGHT (C) 2010, 2011 NVIDIA CORPORATION. ALL RIGHTS RESERVED.
// ------------------------------------------------------------------------------
//  Open Source under the "BSD" license: http://www.opensource.org/licenses/bsd-license.php
//
// * Redistribution and use in source and binary forms,
//   with or without modification, are permitted provided 
//   that the following conditions are met:
// 
// * Redistributions of source code must retain the above
//   copyright notice, this list of conditions and the
//   following disclaimer.
// 
// * Redistributions in binary form must reproduce the above
//   copyright notice, this list of conditions and the
//   following disclaimer in the documentation and/or other
//   materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ==============================================================================
#if SSAO_QUALITY == 1
#   define SSAO_SAMPLER_COUNT 8
#   define SSAO_BLUR_RADIUS 6
#elif SSAO_QUALITY == 2
#   define SSAO_SAMPLER_COUNT 12
#   define SSAO_BLUR_RADIUS 8
#elif SSAO_QUALITY >= 3
#   define SSAO_SAMPLER_COUNT 16
#   define SSAO_BLUR_RADIUS 8
#else
#   define SSAO_SAMPLER_COUNT 8
#   define SSAO_BLUR_RADIUS 6
#endif

shared texture SSAOMap : RENDERCOLORTARGET <
    float2 ViewPortRatio = {1.0, 1.0};
    int Miplevels = 1;
    bool AntiAlias = false;
    string Format = "L8";
>;
texture SSAOMapTemp : RENDERCOLORTARGET <
    float2 ViewPortRatio = {1.0, 1.0};
    int Miplevels = 1;
    bool AntiAlias = false;
    string Format = "L8";
>;
sampler SSAOMapSamp = sampler_state {
    texture = <SSAOMap>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU  = CLAMP;  AddressV = CLAMP;
};
sampler SSAOMapSampTemp = sampler_state {
    texture = <SSAOMapTemp>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU  = CLAMP;  AddressV = CLAMP;
};

float linearizeDepth(float2 uv)
{
    return tex2D(DepthMapSamp, uv).g;
}

float3 GetPosition(float2 uv)
{
    float depth = abs(linearizeDepth(uv));
    return ReconstructPos(uv, matProjectInverse, depth);
}

float3 GetNormal(float2 uv)
{
    float4 MRT2 = tex2D(Gbuffer2Map, uv);
    float4 MRT6 = tex2D(Gbuffer6Map, uv);
    
    float linearDepth = tex2D(Gbuffer4Map, uv).r;
    float linearDepth2 = tex2D(Gbuffer8Map, uv).r;
    float4 MRT = linearDepth2 > 1.0 ? (linearDepth < linearDepth2 ? MRT2 : MRT6) : MRT2;
    return DecodeGBufferNormal(MRT);
}

float2 tapLocation(int index, float noise)
{
    float alpha = 2.0 * PI * 7 / SSAO_SAMPLER_COUNT;
    float angle = (index + noise) * alpha;
    float radius = (1 + mSSAORadiusM - mSSAORadiusP) * 16;
    float2 radiusStep = ((ViewportSize.x / radius) / ViewportSize) / SSAO_SAMPLER_COUNT;
    return float2(cos(angle), sin(angle)) * (index * radiusStep + ViewportOffset2);
}

float4 SSAO(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : COLOR
{
    float depth = linearizeDepth(coord);
    float3 viewNormal = GetNormal(coord);
    float3 viewPosition = -viewdir * depth;
       
    float sampleWeight = 0.0f;
    float sampleAmbient = 0.0f;
    float sampleNoise = GetJitterOffset(int2(coord * ViewportSize));

    [unroll]
    for (int j = 0; j < SSAO_SAMPLER_COUNT; j++)
    {
        float2 sampleOffset = coord + tapLocation(j, sampleNoise);
        float3 samplePosition = GetPosition(sampleOffset);
        float3 sampleDirection = samplePosition - viewPosition;

        float sampleLength2 = dot(sampleDirection, sampleDirection);
        float sampleAngle = dot(sampleDirection, viewNormal);

        float f = max((mSSAOSpaceRadius * mSSAOSpaceRadius) - sampleLength2, 0.0f);
        float falloff = f * f * f;

        float bias = viewPosition.z * 0.002 + saturate(1 - viewPosition.z / 300) * 0.02;
        float occlustion  = max(0.0, falloff * (sampleAngle - bias) * rsqrt(sampleLength2));

        sampleWeight += falloff;
        sampleAmbient += occlustion;
    }

    float ao = saturate(1 - sampleAmbient / sampleWeight);
    return pow(ao,  (1 + ao) * (1 - mSSAOM) + ao * ao * mSSAOP * mSSAOIntensityMax);
}

float4 SSAOBlur(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
    float center_d = abs(linearizeDepth(coord));

    float total_c = tex2D(source, coord).r;
    float total_w = 1.0f;
    
    float2 offset1 = coord + offset;
    float2 offset2 = coord - offset;
    
    float3 N = mul(GetNormal(coord), (float3x3)matView);    
    float sharpness = lerp(mSSAOSharpnessMax * dot(N, float3(0,0,-1)), 1, saturate(center_d / 100));
    
    [unroll]
    for (int r = 1; r < SSAO_BLUR_RADIUS; r++)
    {
        float depth1 = abs(linearizeDepth(offset1));
        float depth2 = abs(linearizeDepth(offset2));
        
        float bilateralWeight1 = BilateralWeight(r, depth1, center_d, SSAO_BLUR_RADIUS, sharpness);
        float bilateralWeight2 = BilateralWeight(r, depth2, center_d, SSAO_BLUR_RADIUS, sharpness);

        total_c += tex2D(source, offset1).r * bilateralWeight1;
        total_c += tex2D(source, offset2).r * bilateralWeight2;
        
        total_w += bilateralWeight1;
        total_w += bilateralWeight2;
        
        offset1 += offset;
        offset2 -= offset;
    }

    return total_c / total_w;
}