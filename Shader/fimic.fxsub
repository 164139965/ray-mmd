static float StarScale = 256;
static float BloomScale = 512;

static float2 BloomOffset1 = ViewportOffset2 * 2;
static float2 BloomOffset2 = ViewportOffset2 * 4;
static float2 BloomOffset3 = ViewportOffset2 * 8;
static float2 BloomOffset4 = ViewportOffset2 * 16;

static float BloomScale1 = ((ViewportSize.x * 0.5) / BloomScale);
static float BloomScale2 = ((ViewportSize.x * 0.25) / (BloomScale * 0.5));
static float BloomScale3 = ((ViewportSize.x * 0.125) / (BloomScale * 0.25));
static float BloomScale4 = ((ViewportSize.x * 0.0625) / (BloomScale * 0.125));

static float2 BloomOffsetX1 = float2(ViewportOffset2.x * 2, 0.0)  * BloomScale1;
static float2 BloomOffsetX2 = float2(ViewportOffset2.x * 4, 0.0)  * BloomScale2;
static float2 BloomOffsetX3 = float2(ViewportOffset2.x * 8, 0.0)  * BloomScale3;
static float2 BloomOffsetX4 = float2(ViewportOffset2.x * 16, 0.0) * BloomScale4;

static float2 BloomOffsetY1 = float2(0.0, ViewportOffset2.y * 2)  * BloomScale1;
static float2 BloomOffsetY2 = float2(0.0, ViewportOffset2.y * 4)  * BloomScale2;
static float2 BloomOffsetY3 = float2(0.0, ViewportOffset2.y * 8)  * BloomScale3;
static float2 BloomOffsetY4 = float2(0.0, ViewportOffset2.y * 16) * BloomScale4;

texture DownsampleMap1st : RENDERCOLORTARGET<float2 ViewPortRatio={1.0, 1.0}; string Format="A16B16G16R16F";>;
texture DownsampleMap2nd : RENDERCOLORTARGET<float2 ViewPortRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
texture DownsampleMap3rd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;

sampler DownsampleSamp1st = sampler_state {
    texture = <DownsampleMap1st>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = CLAMP; AddressV = CLAMP;
};
sampler DownsampleSamp2nd = sampler_state {
    texture = <DownsampleMap2nd>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = CLAMP; AddressV = CLAMP;
};
sampler DownsampleSamp3rd = sampler_state {
    texture = <DownsampleMap3rd>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = CLAMP; AddressV = CLAMP;
};

texture GlareLightMap : RENDERCOLORTARGET<float2 ViewPortRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler GlareLightMapSamp = sampler_state {
    texture = <GlareLightMap>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = CLAMP; AddressV = CLAMP;
};

texture BloomMap1st : RENDERCOLORTARGET<float2 ViewPortRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2nd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rd : RENDERCOLORTARGET<float2 ViewPortRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4th : RENDERCOLORTARGET<float2 ViewPortRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture BloomMap1stTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2ndTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rdTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4thTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;

sampler BloomSamp1stTemp = sampler_state {
    texture = <BloomMap1stTemp>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp1st = sampler_state {
    texture = <BloomMap1st>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2ndTemp = sampler_state {
    texture = <BloomMap2ndTemp>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2nd = sampler_state {
    texture = <BloomMap2nd>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rdTemp = sampler_state {
    texture = <BloomMap3rdTemp>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rd = sampler_state {
    texture = <BloomMap3rd>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4thTemp = sampler_state {
    texture = <BloomMap4thTemp>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4th = sampler_state {
    texture = <BloomMap4th>;
    MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};

#if HDR_BLOOM_QUALITY > 1

#if HDR_BLOOM_QUALITY == 2
float4 star_colorCoeff1st[4] = {float4(0.1,0.15,0.475,0.5),float4(0.096,0.144,0.456,0.48),float4(0.04608,0.09216,0.41472,0.4608),float4(0.0884736,0.13271,0.42025,0.442368)};
float4 star_colorCoeff2nd[4] = {float4(0.1,0.15,0.475,0.5),float4(0.0849346,0.127402,0.40344,0.424673),float4(0.0360695,0.072139,0.324625,0.360695),float4(0.061271,0.0919064,0.291037,0.306355)};
float4 star_colorCoeff3rd[4] = {float4(0.1,0.15,0.475,0.5),float4(0.0260201,0.0520403,0.234181,0.260201),float4(0.00270819,0.013541,0.134055,0.13541),float4(0.00140935,0.00704675,0.0697628,0.0704675)};
float4 star_colorCoeff4th[4] = {float4(0.5,0.5,0.5,0.5),float4(0.0366715,0.0366715,0.0366715,0.0366715),float4(0.00268959,0.00268959,0.00268959,0.00268959),float4(0.000197263,0.000197263,0.000197263,0.000197263)};
#else
float4 star_colorCoeff1st[4] = {float4(0.25,0.2375,0.225,0.25),float4(0.18,0.18,0.162,0.225),float4(0.18225,0.164025,0.18225,0.2025),float4(0.164025,0.164025,0.147622,0.18225)};
float4 star_colorCoeff2nd[4] = {float4(0.25,0.225,0.2,0.25),float4(0.164025,0.098415,0.0820125,0.164025),float4(0.0538084,0.0538084,0.032285,0.107617),float4(0.0423644,0.0169458,0.0423644,0.0706074)};
float4 star_colorCoeff3rd[4] = {float4(0.25,0.25,0.25,0.25),float4(0.0463255,0.0277953,0.0277953,0.0463255),float4(0.00515052,0.00515052,0.00309031,0.0085842),float4(0.000954402,0.000572641,0.000954402,0.00159067)};
#endif

texture StreakMap1st : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap2nd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap3rd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap4th : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap1stTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap2ndTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap3rdTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap4thTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;

sampler StreakSamp1st = sampler_state {
    texture = <StreakMap1st>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp1stTemp = sampler_state {
    texture = <StreakMap1stTemp>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp2nd = sampler_state {
    texture = <StreakMap2nd>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp2ndTemp = sampler_state {
    texture = <StreakMap2ndTemp>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp3rd = sampler_state {
    texture = <StreakMap3rd>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp3rdTemp = sampler_state {
    texture = <StreakMap3rdTemp>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp4th = sampler_state {
    texture = <StreakMap4th>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp4thTemp = sampler_state {
    texture = <StreakMap4thTemp>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
#endif

#if HDR_FLARE_ENABLE > 0
float4 ghost_scalar1st = float4(-4.0, 3.0, -2.0, 0.3);
float4 ghost_scalar2nd = float4(3.6, 2.0, 0.9, -0.77);

#if HDR_BLOOM_QUALITY == 2
float4 ghost_modulation1st[4] = {float4(0.1, 0.10, 1.00, 1.0), float4(0.2, 0.30, 1.0, 1.0), float4(0.10, 0.20, 0.60, 1.0), float4(0.60, 0.30, 1.00, 1.0)};
float4 ghost_modulation2nd[4] = {float4(0.6, 0.20, 0.20, 1.0), float4(0.2, 0.06, 0.6, 1.0), float4(0.15, 0.00, 0.10, 1.0), float4(0.06, 0.00, 0.55, 1.0)};
#else
float4 ghost_modulation1st[4] = {float4(1.0, 0.89, 0.80, 1.0), float4(1.0, 0.60, 0.5, 1.0), float4(0.50, 0.50, 0.30, 1.0), float4(0.50, 0.50, 0.30, 1.0)};
float4 ghost_modulation2nd[4] = {float4(0.2, 0.06, 0.14, 1.0), float4(0.5, 0.15, 0.1, 1.0), float4(0.10, 0.05, 0.02, 1.0), float4(0.10, 0.05, 0.02, 1.0)};
#endif

texture GhostMaskMap<string ResourceName = "shader/textures/mask.png";>; 
sampler GhostMaskMapSamp = sampler_state
{
    texture = <GhostMaskMap>;
    MinFilter = NONE; MagFilter = NONE; MipFilter = NONE;
    AddressU  = CLAMP; AddressV = CLAMP;
};

texture GhostImageMap : RENDERCOLORTARGET <
    float2 ViewPortRatio = {0.5, 0.5};
    string Format="A2B10G10R10";
>;
sampler GhostImageMapSamp = sampler_state {
    texture = <GhostImageMap>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = CLAMP; AddressV = CLAMP;
};
#endif

void HDRScreenQuadVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD,
    out float2 oTexcoord : TEXCOORD0,
    out float4 oPosition : POSITION,
    uniform float2 offset)
{
    oPosition = Position;
    oTexcoord = Texcoord + offset * 0.5;
}

void HDRDownsampleVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD,
    out float2 oTexcoord1 : TEXCOORD0,
    out float2 oTexcoord2 : TEXCOORD1,
    out float2 oTexcoord3 : TEXCOORD2,
    out float2 oTexcoord4 : TEXCOORD3,
    out float4 oPosition : POSITION,
    uniform float2 step)
{
    oPosition = Position;
    oTexcoord1 = Texcoord + step * 0.5;
    oTexcoord2 = oTexcoord1 + float2(step.x, 0);
    oTexcoord3 = oTexcoord1 + float2(step.x, step.y);
    oTexcoord4 = oTexcoord1 + float2(0, step.y);
}

float4 HDRDownsample4XPS(
    in float2 coord1 : TEXCOORD0, 
    in float2 coord2 : TEXCOORD1, 
    in float2 coord3 : TEXCOORD2, 
    in float2 coord4 : TEXCOORD3,
    uniform sampler source) : COLOR
{
    float4 color = tex2D(source, coord1);
    color += tex2D(source, coord2);
    color += tex2D(source, coord3);
    color += tex2D(source, coord4);
    return color / 4;
}

float4 HDRDownsamplePS(in float2 coord : TEXCOORD0, uniform sampler source) : COLOR
{
    return tex2D(source, coord);
}

void GlareDetectionVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD,
    out float2 oTexcoord1 : TEXCOORD0,
    out float2 oTexcoord2 : TEXCOORD1,
    out float2 oTexcoord3 : TEXCOORD2,
    out float2 oTexcoord4 : TEXCOORD3,
    out float2 oTexcoord5 : TEXCOORD4,
    out float4 oPosition : POSITION)
{
    float4 offset0 = float4(-1,0,1,0) * ViewportOffset2.xyxy;
    float4 offset1 = float4(0,-1,0,1) * ViewportOffset2.xyxy;
    
    oPosition = Position;
    oTexcoord1 = Texcoord;
    oTexcoord2 = oTexcoord1 + offset0.xy;
    oTexcoord3 = oTexcoord1 + offset0.zw;
    oTexcoord4 = oTexcoord1 + offset1.xy;
    oTexcoord5 = oTexcoord1 + offset1.zw;
}

float4 GlareDetectionPS(
    in float2 coord1 : TEXCOORD0,
    in float2 coord2 : TEXCOORD1,
    in float2 coord3 : TEXCOORD2,
    in float2 coord4 : TEXCOORD3,
    in float2 coord5 : TEXCOORD4,
    uniform sampler source) : COLOR
{   
    float4 color = tex2D(source, coord1);
    color = min(color, tex2D(source, coord2));
    color = min(color, tex2D(source, coord3));
    color = min(color, tex2D(source, coord4));
    color = min(color, tex2D(source, coord5));
    
    float4 bloom = max(color - (1.0 - mBloomThreshold) / (mBloomThreshold + EPSILON), 0.0);   
    return bloom * lerp(0.1, 20, mBloomIntensity);
}

float4 BloomBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{    
    const float weights[15] = { 153, 816, 3060, 8568, 18564, 31824, 43758, 48620, 43758, 31824, 18564, 8568, 3060, 816, 153 };
    const float weightSum = 262106.0;
    
    float4 color = 0;
    float2 coords = coord - offset * 7.0;
    
    for (int i = 0; i < 15; ++i)
    {
        color += tex2D(source, coords) * (weights[i] / weightSum);
        coords += offset;
    }

    return color;
}

float BloomFactor(float factor) 
{
    float mirrorFactor = 1.2 - factor;
    return lerp(factor, mirrorFactor, mBloomRadius);
}

void StarStreakVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD,
    out float2 oTexcoord0 : TEXCOORD0,
    out float2 oTexcoord1 : TEXCOORD1,
    out float2 oTexcoord2 : TEXCOORD2,
    out float2 oTexcoord3 : TEXCOORD3,
    out float4 oPosition : POSITION,
    uniform float2 stepSize,
    uniform float stride)
{
    float2 offset = ViewportSize * 0.25;
    oTexcoord0 = Texcoord + (0.5 / offset);
    oTexcoord1 = oTexcoord0 + stepSize / (offset / (offset / StarScale)) * stride;
    oTexcoord2 = oTexcoord0 + stepSize / (offset / (offset / StarScale)) * stride * 2;
    oTexcoord3 = oTexcoord0 + stepSize / (offset / (offset / StarScale)) * stride * 3;
    oPosition = Position;
}

float4 StarStreakPS(
    in float2 coord0 : TEXCOORD0,
    in float2 coord1 : TEXCOORD1,
    in float2 coord2 : TEXCOORD2,
    in float2 coord3 : TEXCOORD3,
    uniform sampler source, uniform float4 colorCoeff[4], uniform float threshold) : COLOR
{
    float4 color0 = tex2D(source, coord0) * colorCoeff[0];
    float4 color1 = tex2D(source, coord1) * colorCoeff[1];
    float4 color2 = tex2D(source, coord2) * colorCoeff[2];
    float4 color3 = tex2D(source, coord3) * colorCoeff[3];
    return max(0, (color0 + color1 + color2 + color3) - threshold / (1 - threshold + EPSILON) * 10);
}

float4 GlareLightCompPS(in float2 coord : TEXCOORD0) : COLOR
{
    float bloomFactors[] = {0.8, 0.6, 0.4, 0.2};
    
    float4 bloom1 = BloomFactor(bloomFactors[0]) * tex2D(BloomSamp1st, coord);
    float4 bloom2 = BloomFactor(bloomFactors[1]) * tex2D(BloomSamp2nd, coord);
    float4 bloom3 = BloomFactor(bloomFactors[2]) * tex2D(BloomSamp3rd, coord);
    float4 bloom4 = BloomFactor(bloomFactors[3]) * tex2D(BloomSamp4th, coord);
    
    float4 bloom = 0.0f;
    bloom += bloom1;
    bloom += bloom2;
    bloom += bloom3;
    bloom += bloom4;
    
#if HDR_BLOOM_QUALITY > 1
    float4 star = max(tex2D(StreakSamp1st, coord), tex2D(StreakSamp2nd, coord));
    #if HDR_BLOOM_QUALITY > 2
        star = max(star, max(tex2D(StreakSamp3rd, coord), tex2D(StreakSamp4th, coord)));
    #endif
    bloom += star;
#endif
    
    return bloom;
}

void GhostImageVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD,
    out float2 oTexcoord0 : TEXCOORD0,
    out float2 oTexcoord1 : TEXCOORD1,
    out float2 oTexcoord2 : TEXCOORD2,
    out float2 oTexcoord3 : TEXCOORD3,
    out float4 oPosition : POSITION,
    uniform float4 scalar)
{
    oTexcoord0 = (Texcoord - 0.5) * scalar[0] + 0.5;
    oTexcoord1 = (Texcoord - 0.5) * scalar[1] + 0.5;
    oTexcoord2 = (Texcoord - 0.5) * scalar[2] + 0.5;
    oTexcoord3 = (Texcoord - 0.5) * scalar[3] + 0.5;
    oPosition = Position;
}

float4 GhostImagePS(
    in float2 coord0 : TEXCOORD0,
    in float2 coord1 : TEXCOORD1,
    in float2 coord2 : TEXCOORD2,
    in float2 coord3 : TEXCOORD3,
    uniform sampler source1,
    uniform sampler source2,
    uniform sampler source3,
    uniform sampler source4, 
    uniform float4 colorCoeff[4], uniform float threshold) : COLOR
{
    float4 color1 = (tex2D(source1, coord0) - threshold / (1 - threshold + EPSILON) * 10) * tex2D(source4, coord0) * colorCoeff[0];
    float4 color2 = (tex2D(source1, coord1) - threshold / (1 - threshold + EPSILON) * 10) * tex2D(source4, coord1) * colorCoeff[1];
    float4 color3 = (tex2D(source2, coord2) - threshold / (1 - threshold + EPSILON) * 10) * tex2D(source4, coord2) * colorCoeff[2];
    float4 color4 = (tex2D(source3, coord3) - threshold / (1 - threshold + EPSILON) * 10) * tex2D(source4, coord3) * colorCoeff[3];
    return max(0, (color1 + color2 + color3 + color4));
}

float3 ACESFilmRec709(float3 x)
{
    const float A = 2.51f;
    const float B = 0.03f;
    const float C = 2.43f;
    const float D = 0.59f;
    const float E = 0.14f;
    return (x * (A * x + B)) / (x * (C * x + D) + E);   
}

float3 ACESFilmRec2020(float3 x)
{
    float a = 15.8f;
    float b = 2.12f;
    float c = 1.2f;
    float d = 5.92f;
    float e = 1.9f;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

float3 FilmicTonemap(float3 color, float exposure)
{
#if HDR_TONEMAP_OPERATOR == 0
    return color * exposure;
#elif HDR_TONEMAP_OPERATOR == 1
    color = color * exposure;
    float3 curr = ACESFilmRec709(color);
    return curr;
#elif HDR_TONEMAP_OPERATOR == 2
    color = color * exposure;
    float3 curr = ACESFilmRec2020(color);
    return curr;
#else
    return color * exposure;
#endif
}

float3 ColorBalance(float3 color, float4 balance)
{
    float3 lum = luminance(color);
    color = lerp(lum, color, 1 - balance.a);
    color *= balance.rgb;
    return color;
}

float3 AppleVignette(float3 color, float2 coord, float inner, float outer)
{
    float L = length(coord * 2 - 1);
    return color * smoothstep(outer, inner, L);
}

float3 AppleDispersion(sampler source, float2 coord, float inner, float outer)
{
    float L = length(coord * 2 - 1);
    L = 1 - smoothstep(outer, inner, L);
    float3 color = tex2D(source, coord).rgb;
    color.g = tex2D(source, coord - ViewportOffset2 * L * (mDispersion * 8)).g;
    color.b = tex2D(source, coord + ViewportOffset2 * L * (mDispersion * 8)).b;
    return color;
}

float ComputeEV100(float aperture, float shutterTime, float ISO)
{
    return log2(aperture / shutterTime * 100 / ISO);
}

float ComputeExposureFromEV100(float EV100)
{
    float maxLuminance = 1.2f * pow (2.0f, EV100);
    return 1.0f / maxLuminance;
}

float4 FimicToneMappingPS(in float2 coord: TEXCOORD0, uniform sampler source) : COLOR
{
    float3 color = AppleDispersion(source, coord, mDispersionRadius, 1 + mDispersionRadius);
    
#if HDR_ENABLE
#if HDR_BLOOM_QUALITY > 0
    float3 bloom = tex2D(GlareLightMapSamp, coord).rgb;  
    color = lerp(color, bloom, 0.33);
#endif

    float3 balance = float3(1 + float3(mColBalanceRP, mColBalanceGP, mColBalanceBP) - float3(mColBalanceRM, mColBalanceGM, mColBalanceBM));
    color = ColorBalance(color, float4(balance, mColBalance));
    color = FilmicTonemap(color, 1.5 + mExposure * 10);
#endif
    
    color = lerp(0.18, color, 1 + mContrastP - mContrastM * 0.5);
    color = AppleVignette(color, coord, 1.5 - mVignette, 2.5 - mVignette);
    color = saturate(color);
    
#if AA_QUALITY == 0
    color = linear2srgb(color);
    color = ApplyDithering(color, coord);
    return float4(color, 1);
#else
    return float4(color, luminance(color));
#endif
}