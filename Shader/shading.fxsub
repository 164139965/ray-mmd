bool ExistSkybox : CONTROLOBJECT<string name = "skybox.pmx";>;
bool ExistSkyboxHDR : CONTROLOBJECT<string name = "skybox_hdr.pmx";>;

float3 ShadingMaterial(float3 N, float3 V, float3 L, float2 coord, MaterialParam material)
{
    float3 lighting = 0;

#if MAIN_LIGHT_ENABLE
    float vis = saturate(dot(N, L));

    lighting = material.albedo * DiffuseBRDF(N, L, V, material.smoothness, material.transmittance);
    lighting += SpecularBRDF(N, L, V, material.smoothness, material.specular) * vis;
    lighting *= LightSpecular * (mMainLightIntensityMin + mDirectionLightP * mMainLightIntensityMax - mDirectionLightM);
    lighting *= step(0, material.albedo + material.specular - 1e-5);
    
#if SHADOW_QUALITY > 0
    lighting *= tex2D(ShadowmapSamp, coord).r;
#endif
#endif
    
    return lighting;
}

float4 ShadingOpacityPS(
    in float2 coord: TEXCOORD0, 
    in float3 viewdir: TEXCOORD1, 
    in float4 screenPosition : SV_Position) : COLOR
{
    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    float4 MRT4 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
            
    float3 V = mul(normalize(viewdir), (float3x3)matViewInverse);
    float3 P = mul(float4(-viewdir * material.linearDepth, 1), matViewInverse).xyz;
    float3 N = mul(material.normal, (float3x3)matViewInverse);
    float3 L = normalize(-LightDirection);
    
    float3 lighting = 0;
    lighting += tex2D(LightMapSamp, coord).rgb;
    lighting += ShadingMaterial(N, V, L, coord, material);
    
#if SSAO_SAMPLER_COUNT > 0
    float ssao = tex2D(SSAOMapSamp, coord).r;
    lighting *= ComputeSpecularOcclusion(abs(dot(N, V)) + EPSILON, ssao, material.smoothness);
#endif
    
#if OUTDOORFLOOR_QUALITY > 0
    float floorVisiable = saturate(step(0.9, dot(N, float3(0, 1, 0))));
    floorVisiable *= abs(P.y) > 1 ? 0 : (1 - abs(P.y));
    
    float mipLevel = EnvironmentMip(6, material.smoothness);
    
    float4 floor = tex2Dlod(OutdoorShadingMapSamp, float4(coord, 0, mipLevel));
    floor.rgb *= EnvironmentSpecularUnreal4(N, V, material.smoothness, material.specular);
    floor.rgb *= floorVisiable;
    lighting += floor.rgb;
#endif
    
    lighting += srgb2linear(tex2D(ScnSamp, coord).rgb);

#if IBL_QUALITY > 0   
    float3 diffuse, diffuse2;
    float3 specular, specular2;
    
#if IBL_QUALITY > 1
    DecodeYcbcrWithEdgeFilter(EnvLightMapSamp, coord, screenPosition, ViewportOffset2, diffuse, diffuse2);
    DecodeYcbcrWithEdgeFilter(EnvLightSpecMapSamp, coord, screenPosition, ViewportOffset2, specular, specular2);
#else
    DecodeYcbcrBilinearFilter(EnvLightMapSamp, coord, screenPosition, ViewportOffset2, diffuse, diffuse2);
    DecodeYcbcrBilinearFilter(EnvLightSpecMapSamp, coord, screenPosition, ViewportOffset2, specular, specular2);
#endif

#if OUTDOORFLOOR_QUALITY > 0
    specular *= (1 - floorVisiable);
#endif

#if SSAO_SAMPLER_COUNT > 0
    diffuse *= ssao;
    specular *= ComputeSpecularOcclusion(abs(dot(N, V)) + EPSILON, ssao, material.smoothness);
#endif

    float shadow = 1;
#if MAIN_LIGHT_ENABLE && SHADOW_QUALITY > 0
    float2 shadowDepth = tex2D(ShadowmapSamp, coord).rg;
    shadow = lerp(1, shadowDepth.r, mEnvShadowP);
#endif

    if (ExistSkybox || ExistSkyboxHDR)
    {
        lighting += (diffuse + specular) * shadow;
    }
#endif

#if FOG_ENABLE
    float4 fog = tex2D(FogMapSamp, coord);
    lighting = lighting + fog.rgb;
#endif

#if MAIN_LIGHT_ENABLE && SHADOW_QUALITY > 0
    #if IBL_QUALITY == 0
        float2 shadowDepth = tex2D(ShadowmapSamp, coord).rg;
    #endif
    float linearDepth = shadowDepth.g;
#else
    float linearDepth = material.linearDepth;
#endif
    
    return float4(lighting, linearDepth);
}

float4 ShadingTransparentPS(
    in float2 coord: TEXCOORD0, 
    in float3 viewdir: TEXCOORD1, 
    in float4 screenPosition : SV_Position) : COLOR
{
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);
    
    MaterialParam material;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);
        
    float3 V = mul(normalize(viewdir), (float3x3)matViewInverse);
    float3 P = mul(float4(-viewdir * material.linearDepth, 1), matViewInverse).xyz;
    float3 N = mul(material.normal, (float3x3)matViewInverse);
    float3 L = normalize(-LightDirection);
    
    float3 lighting = ShadingMaterial(N, V, L, coord, material);
    lighting += tex2D(LightAlphaMapSamp, coord).rgb;
    
#if SSAO_SAMPLER_COUNT > 0
    float ssao = tex2D(SSAOMapSamp, coord).r;
    lighting *= ComputeSpecularOcclusion(abs(dot(N, V)) + EPSILON, ssao, material.smoothness);
#endif

#if IBL_QUALITY > 0   
    float3 diffuse, diffuseAlpha;
    float3 specular, specularAlpha;
    
#if IBL_QUALITY > 1
    DecodeYcbcrWithEdgeFilter(EnvLightMapSamp, coord, screenPosition, ViewportOffset2, diffuse, diffuseAlpha);
    DecodeYcbcrWithEdgeFilter(EnvLightSpecMapSamp, coord, screenPosition, ViewportOffset2, specular, specularAlpha);
#else
    DecodeYcbcrBilinearFilter(EnvLightMapSamp, coord, screenPosition, ViewportOffset2, diffuse, diffuseAlpha);
    DecodeYcbcrBilinearFilter(EnvLightSpecMapSamp, coord, screenPosition, ViewportOffset2, specular, specularAlpha);
#endif

#if SSAO_SAMPLER_COUNT > 0
    diffuseAlpha *= ssao;
    specularAlpha *= ComputeSpecularOcclusion(abs(dot(N, V)) + EPSILON, ssao, material.smoothness);
#endif

    float shadow = 1;
#if MAIN_LIGHT_ENABLE && SHADOW_QUALITY > 0
    float2 shadowDepth = tex2D(ShadowmapSamp, coord).rg;
    shadow = lerp(1, shadowDepth.r, mEnvShadowP);
#endif
   
    if (ExistSkybox || ExistSkyboxHDR)
    {
        lighting += (diffuseAlpha + specularAlpha) * shadow;
    } 
#endif
    
#if FOG_ENABLE
    float4 fog = tex2D(FogAlphaMapSamp, coord);
    lighting = lighting + fog.rgb;
#endif
    
    float4 prefilteredRefract = tex2D(ShadingMapTempSamp, coord + N.xy * 0.04325 * (1 - material.alpha) * material.alpha);
    lighting = lerp(prefilteredRefract.rgb, lighting, material.alpha);

#if MAIN_LIGHT_ENABLE && SHADOW_QUALITY > 0
    #if IBL_QUALITY == 0
        float2 shadowDepth = tex2D(ShadowmapSamp, coord).rg;
    #endif
    float linearDepth = shadowDepth.g;
#else
    float linearDepth = prefilteredRefract.a;
    float linearDepth2 = material.linearDepth;
    linearDepth = linearDepth2 > 1.0 ? min(linearDepth, linearDepth2) : linearDepth;
#endif
    
    return float4(lighting, linearDepth);
}