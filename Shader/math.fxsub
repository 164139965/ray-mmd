#define InvLog2 3.32192809489f

#define InvPIE 0.318309886142f
#define InvPIE8 0.039788735767f
#define InvPIE4 0.079577471535f

#define PI 3.141592654f
#define PI_2 (3.141592654f * 2.0)

#define EPSILON 1e-5f

#define MIDPOINT_8_BIT (127.0f / 255.0f)

float3 srgb2linear(float3 rgb)
{
    const float ALPHA = 0.055f;
    return rgb < 0.04045f ? rgb / 12.92f : pow((abs(rgb) + ALPHA) / (1 + ALPHA), 2.4f);
}

float3 linear2srgb(float3 srgb)
{
    const float ALPHA = 0.055f;
    return srgb < 0.0031308f ? 12.92f * srgb : (1 + ALPHA) * pow(abs(srgb), 1.0f / 2.4f) - ALPHA;
}

float4 srgb2linear(float4 c)
{
    return float4(srgb2linear(c.rgb), c.a);
}

float4 linear2srgb(float4 c)
{
    return float4(linear2srgb(c.rgb), c.a);
}

float3 rgb2ycbcr(float3 col)
{
    float3 encode;
    encode.x = dot(float3(0.299, 0.587, 0.114),   col.rgb);
    encode.y = dot(float3(-0.1687, -0.3312, 0.5), col.rgb);
    encode.z = dot(float3(0.5, -0.4186, -0.0813), col.rgb);
    return float3(encode.x, encode.y * MIDPOINT_8_BIT + MIDPOINT_8_BIT, encode.z * MIDPOINT_8_BIT + MIDPOINT_8_BIT);
}

float3 ycbcr2rgb(float3 YCbCr)
{
    YCbCr = float3(YCbCr.x, YCbCr.y / MIDPOINT_8_BIT - 1, YCbCr.z / MIDPOINT_8_BIT - 1);
    float R = YCbCr.x + 1.402 * YCbCr.z;
    float G = dot(float3( 1, -0.3441, -0.7141 ), YCbCr.xyz );
    float B = YCbCr.x + 1.772 * YCbCr.y;
    return float3(R, G, B);
}

float luminance(float3 rgb)
{
    const float3 lumfact = float3(0.2126f, 0.7152f, 0.0722f);
    return dot(rgb, lumfact);
}

float pow2(float x)
{
    return x * x;
}

float sum(float3 v)
{
    return v.x + v.y + v.z;
}

float sum(float4 v)
{
    return v.x + v.y + v.z + v.w;
}

float length2(float3 v)
{
    return dot(v, v);
}

float length2(float4 v)
{
    return dot(v, v);
}

float3 DecodeRGBM(in float4 rgbm)
{
    return 6 * rgbm.rgb * rgbm.a;
}

float2 PosToCoord(float2 position)
{
    position = position * 0.5 + 0.5;
    return float2(position.x, 1 - position.y);
}

float2 CoordToPos(float2 coord)
{
    coord.y = 1 - coord.y;
    return coord * 2 - 1;
}

float3x3 makeRotate(float eulerX, float eulerY, float eulerZ)
{
    float sj, cj, si, ci, sh, ch;

    sincos(eulerX, si, ci);
    sincos(eulerY, sj, cj);
    sincos(eulerZ, sh, ch);

    float cc = ci * ch;
    float cs = ci * sh;
    float sc = si * ch;
    float ss = si * sh;

    float a1 = cj * ch;
    float a2 = sj * sc - cs;
    float a3 = sj * cc + ss;

    float b1 = cj * sh;
    float b2 = sj * ss + cc;
    float b3 = sj * cs - sc;

    float c1 = -sj;
    float c2 = cj * si;
    float c3 = cj * ci;
    
    float3x3 rotate;
    rotate[0] = float3(a1, a2, a3);
    rotate[1] = float3(b1, b2, b3);
    rotate[2] = float3(c1, c2, c3);
    
    return rotate;
}

float2 computeSphereCoord(float3 normal)
{
    float2 coord = float2(1 - (atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
    return coord;
}

const static float JitterOffsets[16] = {
     0.215168, -0.243968,   0.625509, -0.623349,
     0.247428, -0.224435,  -0.355875, -0.00792976,
    -0.619941, -0.00287403, 0.238996,  0.344431,
     0.627993, -0.772384,  -0.212489,  0.769486
};

float GetJitterOffset(int2 iuv)
{
    int index = (iuv.x % 4) * 4 + (iuv.y % 4);
    int index2 = ((iuv.x/4) % 4) * 4 + ((iuv.y/4) % 4);
    return (JitterOffsets[index] + JitterOffsets[index2] * 1 / 16.0);
}

float GaussianWeight(float n, float sigma)
{
    const float blurSigma = sigma * 0.5f;
    const float blurFalloff = 2.0f * blurSigma * blurSigma;
    float g = 1.0 / sqrt(PI * blurFalloff);
    return g * exp(-(n * n) / (blurFalloff));
}

float BilateralWeight(float r, float depth, float center_d, float sigma, float sharpness)
{
    const float blurSigma = sigma * 0.5f;
    const float blurFalloff = 1.0f / (2.0f * blurSigma * blurSigma);
    float ddiff = (depth - center_d) * sharpness;
    return exp(-r * r * blurFalloff - ddiff * ddiff);
}

float SmoothCurve(float x)
{
    return x * x * (3.0 - 2.0 * x);
}

float TriangleWave(float x)
{
    return abs(frac(x + 0.5) * 2.0 - 1.0);
}

float SmoothTriangleWave(float x)
{
    return SmoothCurve(TriangleWave(x));
}