#include "../../ray.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/shadowcommon.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/lighting.fxsub"

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float mBlink : CONTROLOBJECT < string name="(self)"; string item = "Blink"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;
float mMultiLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "MultiLight+"; >;
float mMultiLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "MultiLight-"; >;

static float LightRange = 1 + mRangeP * LIGHTSOURCE_MAX_RANGE;
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;

static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);
static float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;

#undef SHADOW_MAP_SIZE

#if SHADOW_MAP_ENABLE

#if SHADOW_MAP_QUALITY == 0
#   define SHADOW_MAP_WIDTH 256
#   define SHADOW_MAP_HEIGHT 512
#elif SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_WIDTH 512
#   define SHADOW_MAP_HEIGHT 1024
#elif SHADOW_MAP_QUALITY >= 2
#   define SHADOW_MAP_WIDTH 1024
#   define SHADOW_MAP_HEIGHT 2048
#elif SHADOW_MAP_QUALITY >= 3
#   define SHADOW_MAP_WIDTH 2048
#   define SHADOW_MAP_HEIGHT 4096
#else
#   define SHADOW_MAP_WIDTH 256
#   define SHADOW_MAP_HEIGHT 512
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
    string Description = "Shadow Rendering for PointLight";
    int Width = SHADOW_MAP_WIDTH;
    int Height = SHADOW_MAP_HEIGHT;
    string Format = "R32F";
    float4 ClearColor = { 1, 1, 1, 1 };
    float ClearDepth = 1.0;
    int MipLevels = 1;
    string DefaultEffect = 
        "self = hide;"
        "*fog.pmx=hide;"
        "*controller.pmx=hide;"
        "*.pmx = point_shadow.fx;"
        "*.pmd = point_shadow.fx;"
        "* = hide";
>;
sampler ShadowMapSamp = sampler_state {
    texture = <ShadowMap>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = CLAMP;
    AddressV = CLAMP;
};

static float2 ShadowmapOffset  = float2(0.5 / SHADOW_MAP_WIDTH, 0.5 / SHADOW_MAP_HEIGHT);
static float2 ShadowmapOffset2 = float2(1.0 / SHADOW_MAP_WIDTH, 1.0 / SHADOW_MAP_HEIGHT);

float ShadowPCF(float3 viewPosition, int samples) 
{
    float4 worldPosition = mul(float4(viewPosition, 1), matViewInverse);
    float3 L = worldPosition.xyz - LightPosition;
    
    float linearDepth = length(L);
    
    float depthScale = 85;
    float depth = (PointLightFar / linearDepth) * (linearDepth - PointLightNear) / (PointLightFar - PointLightNear);
    depth = exp(-depth * depthScale);
    
    float2 coord = CalcDualShadowCoord(L / linearDepth, SHADOW_MAP_HEIGHT);

    float shadow = 0.0;
    
#if SHADOW_MAP_SOFT_QUALITY > 0
    [unroll]
    for (int x = -samples; x <= samples; x++) 
    {
        [unroll]
        for (int y = -samples; y <= samples; y++)
        {
            float2 pos = coord.xy + float2(x, y) * ShadowmapOffset2;
            shadow += saturate(exp(tex2D(ShadowMapSamp, pos).r * depthScale) * depth);
        }
    }
    
    samples = samples * 2 + 1;
    
    return saturate(shadow / (samples * samples));
#else
    return saturate(depth * exp(tex2D(ShadowMapSamp, coord).r * depthScale));
#endif
}

#endif

float4 ShadingMaterial(MaterialParam material, float3 V)
{
    float3 P = V * material.linearDepth / V.z;

    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float atten = GetPhysicalLightAttenuation(L, LightRange);
    float atten2 = saturate(dot(material.normal, L2)) * atten;
   
    float4 lighting = 0.0f;
            
    lighting.rgb = atten * material.albedo * DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb += atten2 * SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity;
    lighting.rgb *= saturate(1 - SmoothTriangleWave(time * (mBlink * 10)));
    lighting *= (1 + mMultiLightP * 10 - mMultiLightM);
    
    return lighting;
}

float4 ShadingShadow(MaterialParam material, MaterialParam materialAlpha, float3 V)
{
    float linearDepth = material.linearDepth;
    float linearDepth2 = materialAlpha.linearDepth;
    linearDepth = linearDepth2 > 1.0 ? min(linearDepth, linearDepth2) : linearDepth;
    
    float shadow = 1;
#if SHADOW_MAP_ENABLE
    float3 P = V * linearDepth / V.z;
    #if SHADOW_MAP_SOFT_QUALITY == 1
        shadow *= ShadowPCF(P, 1);
    #elif SHADOW_MAP_SOFT_QUALITY == 2
        shadow *= ShadowPCF(P, 2);
    #elif SHADOW_MAP_SOFT_QUALITY >= 3
        shadow *= ShadowPCF(P, 3);
    #else
        shadow *= ShadowPCF(P, 0);
    #endif
#endif

    return shadow;
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
    Position.xyz = LightPosition + Normal * LightRange;
    oPosition = mul(Position, matViewProject);
    oTexcoord0 = oPosition;
    oTexcoord1 = -mul(Position, matView);
}

void LightSourcePS(
    float4 texcoord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
    float3 sum1 = material.albedo + material.specular;
    float3 sum2 = materialAlpha.albedo + materialAlpha.specular;
    clip(sum(sum1 + sum2 - 1e-5));

    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
    
    clip(sum(oColor0 + oColor1) - 1e-5);
    
    float shadow = ShadingShadow(material, materialAlpha, V);
    oColor0 *= shadow;
    oColor1 *= shadow;
}

void LightSourceShadowlessPS(
    float4 texcoord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

    float3 sum1 = material.albedo + material.specular;
    float3 sum2 = materialAlpha.albedo + materialAlpha.specular;
    clip(sum(sum1 + sum2 - 1e-5));

    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
}

technique MainTech0 < string MMDPass = "object";
    string Script = 
        "RenderColorTarget0=;"
        "RenderColorTarget1=LightAlphaMap;"
        "Pass=DrawObject;"
;>{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = CW;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
    }
}

technique MainTecBS0 < string MMDPass = "object_ss";
    string Script = 
        "RenderColorTarget0=;"
        "RenderColorTarget1=LightAlphaMap;"
        "Pass=DrawObject;"
;>{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = CW;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourcePS();
    }
}
    
technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}