#include "../../ray.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/lighting.fxsub"
#include "../../shader/fog.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float mGlossP : CONTROLOBJECT < string name="(self)"; string item = "Gloss+"; >;
float mGlossM : CONTROLOBJECT < string name="(self)"; string item = "Gloss-"; >;
float mBlink : CONTROLOBJECT < string name="(self)"; string item = "Blink"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;

static float LightRange = 1 + mRangeP * LIGHTSOURCE_MAX_RANGE;
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;
static float3 LightPosition = mPosition;

void SphereFogVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
    Position.xyz = LightPosition + Normal * LightRange;
    oPosition = mul(Position, matViewProject);
    oTexcoord0 = oPosition;
    oTexcoord1 = Position;
}

void SphereFogPS(
    float4 texcoord : TEXCOORD0, 
    float3 position : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;
    
    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

    float3 P = mul(float4(position, 1), matView).xyz;
    float3 V = normalize(-P);
    
    LightParam param;
    param.lightPosition = LightPosition;
    param.lightRange = LightRange;
    param.lightIntensity = LightIntensity;
    param.lightColor = float3(mR, mG, mB);
    param.eye = CameraPosition;
    param.gloss = lerp(0.01, 0.999, 0.5 + (mGlossP - mGlossM) * 0.5);
    
    float linearDepth = material.linearDepth;
    float linearDepth2 = materialAlpha.linearDepth;
    linearDepth = linearDepth2 > 1.0 ? min(linearDepth, linearDepth2) : linearDepth;
    
    oColor0 = oColor1 = SphereFog(param, V, min(P.z, material.linearDepth), 64);
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
        string Script = \
            "RenderColorTarget0=;"\
            "RenderColorTarget1=LightAlphaMap;"\
            "Pass=DrawObject;"\
    ;>{\
        pass DrawObject {\
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            CullMode = CW;\
            VertexShader = compile vs_3_0 SphereFogVS();\
            PixelShader  = compile ps_3_0 SphereFogPS();\
        }\
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")
    
technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}